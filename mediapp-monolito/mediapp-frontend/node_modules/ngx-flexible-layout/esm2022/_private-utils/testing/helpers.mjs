import { TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { extendObject } from 'ngx-flexible-layout/_private-utils';
/**
 * Function generator that captures a Component Type accessor and enables
 * `createTestComponent()` to be reusable for *any* captured Component class.
 */
export function makeCreateTestComponent(getClass) {
    let componentAny;
    // Return actual `createTestComponent()` function
    return function createTestComponent(template, styles) {
        if (!componentAny) {
            // Defer access to Component class to enable metadata to be configured properly...
            componentAny = getClass();
        }
        return TestBed
            .overrideComponent(componentAny, {
            set: {
                template: template,
                styles: styles || [],
            }
        })
            .createComponent(componentAny);
    };
}
/**
 *
 */
export function expectNativeEl(fixture, instanceOptions) {
    extendObject(fixture.componentInstance, instanceOptions || {});
    fixture.detectChanges();
    return expect(fixture.debugElement.children[0].nativeElement);
}
/**
 *
 */
export function expectEl(debugEl) {
    return expect(debugEl.nativeElement);
}
export function queryFor(fixture, selector) {
    return fixture.debugElement.queryAll(By.css(selector));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnMvZmxleC1sYXlvdXQvX3ByaXZhdGUtdXRpbHMvdGVzdGluZy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBb0IsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUlsRTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsUUFBMEI7SUFDaEUsSUFBSSxZQUF1QixDQUFDO0lBRTVCLGlEQUFpRDtJQUNqRCxPQUFPLFNBQVMsbUJBQW1CLENBQUMsUUFBZ0IsRUFBRSxNQUFZO1FBQ2hFLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsa0ZBQWtGO1lBQ2xGLFlBQVksR0FBRyxRQUFRLEVBQUUsQ0FBQztTQUMzQjtRQUNELE9BQU8sT0FBTzthQUNULGlCQUFpQixDQUFDLFlBQVksRUFBRTtZQUMvQixHQUFHLEVBQUU7Z0JBQ0gsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE1BQU0sRUFBRSxNQUFNLElBQUksRUFBRTthQUNyQjtTQUNGLENBQUM7YUFDRCxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGNBQWMsQ0FBQyxPQUE4QixFQUFFLGVBQXNCO0lBQ25GLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN4QixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUFDLE9BQXFCO0lBQzVDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBR0QsTUFBTSxVQUFVLFFBQVEsQ0FBQyxPQUE4QixFQUFFLFFBQWdCO0lBQ3ZFLE9BQU8sT0FBTyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IERlYnVnRWxlbWVudCwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBCeSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgZXh0ZW5kT2JqZWN0IH0gZnJvbSAnbmd4LWZsZXhpYmxlLWxheW91dC9fcHJpdmF0ZS11dGlscyc7XG5cbmV4cG9ydCB0eXBlIENvbXBvbmVudENsYXp6Rm4gPSAoKSA9PiBUeXBlPGFueT47XG5cbi8qKlxuICogRnVuY3Rpb24gZ2VuZXJhdG9yIHRoYXQgY2FwdHVyZXMgYSBDb21wb25lbnQgVHlwZSBhY2Nlc3NvciBhbmQgZW5hYmxlc1xuICogYGNyZWF0ZVRlc3RDb21wb25lbnQoKWAgdG8gYmUgcmV1c2FibGUgZm9yICphbnkqIGNhcHR1cmVkIENvbXBvbmVudCBjbGFzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VDcmVhdGVUZXN0Q29tcG9uZW50KGdldENsYXNzOiBDb21wb25lbnRDbGF6ekZuKSB7XG4gIGxldCBjb21wb25lbnRBbnk6IFR5cGU8YW55PjtcblxuICAvLyBSZXR1cm4gYWN0dWFsIGBjcmVhdGVUZXN0Q29tcG9uZW50KClgIGZ1bmN0aW9uXG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVUZXN0Q29tcG9uZW50KHRlbXBsYXRlOiBzdHJpbmcsIHN0eWxlcz86IGFueSk6IENvbXBvbmVudEZpeHR1cmU8VHlwZTxhbnk+PiB7XG4gICAgaWYgKCFjb21wb25lbnRBbnkpIHtcbiAgICAgIC8vIERlZmVyIGFjY2VzcyB0byBDb21wb25lbnQgY2xhc3MgdG8gZW5hYmxlIG1ldGFkYXRhIHRvIGJlIGNvbmZpZ3VyZWQgcHJvcGVybHkuLi5cbiAgICAgIGNvbXBvbmVudEFueSA9IGdldENsYXNzKCk7XG4gICAgfVxuICAgIHJldHVybiBUZXN0QmVkXG4gICAgICAgIC5vdmVycmlkZUNvbXBvbmVudChjb21wb25lbnRBbnksIHtcbiAgICAgICAgICBzZXQ6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcbiAgICAgICAgICAgIHN0eWxlczogc3R5bGVzIHx8IFtdLFxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNyZWF0ZUNvbXBvbmVudChjb21wb25lbnRBbnkpO1xuICB9O1xufVxuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3ROYXRpdmVFbChmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPGFueT4sIGluc3RhbmNlT3B0aW9ucyA/OiBhbnkpOiBhbnkge1xuICBleHRlbmRPYmplY3QoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSwgaW5zdGFuY2VPcHRpb25zIHx8IHt9KTtcbiAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gIHJldHVybiBleHBlY3QoZml4dHVyZS5kZWJ1Z0VsZW1lbnQuY2hpbGRyZW5bMF0ubmF0aXZlRWxlbWVudCk7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdEVsKGRlYnVnRWw6IERlYnVnRWxlbWVudCk6IGFueSB7XG4gIHJldHVybiBleHBlY3QoZGVidWdFbC5uYXRpdmVFbGVtZW50KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlGb3IoZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxhbnk+LCBzZWxlY3Rvcjogc3RyaW5nKTogRGVidWdFbGVtZW50W10ge1xuICByZXR1cm4gZml4dHVyZS5kZWJ1Z0VsZW1lbnQucXVlcnlBbGwoQnkuY3NzKHNlbGVjdG9yKSk7XG59XG5cblxuIl19